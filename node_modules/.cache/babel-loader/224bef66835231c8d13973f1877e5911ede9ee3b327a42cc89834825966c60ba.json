{"ast":null,"code":"var _jsxFileName = \"/workspace/src/lib/auth.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState, useCallback } from 'react';\nimport { supabase } from './supabaseClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [session, setSession] = useState(null);\n  const [user, setUser] = useState(null);\n  const [initialized, setInitialized] = useState(false);\n  useEffect(() => {\n    let canceled = false;\n    let timeoutId;\n\n    // Add timeout to prevent infinite loading on mobile\n    timeoutId = setTimeout(() => {\n      if (!canceled) {\n        console.log('Auth initialization timeout - setting initialized to true');\n        setInitialized(true);\n      }\n    }, 5000); // 5 second timeout\n\n    supabase.auth.getSession().then(({\n      data,\n      error\n    }) => {\n      var _data$session, _data$session$user, _data$session2;\n      if (canceled) return;\n      clearTimeout(timeoutId);\n      if (error) {\n        console.error('Session fetch error:', error);\n      }\n      setSession((_data$session = data.session) !== null && _data$session !== void 0 ? _data$session : null);\n      setUser((_data$session$user = (_data$session2 = data.session) === null || _data$session2 === void 0 ? void 0 : _data$session2.user) !== null && _data$session$user !== void 0 ? _data$session$user : null);\n      setInitialized(true);\n    }).catch(error => {\n      if (canceled) return;\n      clearTimeout(timeoutId);\n      console.error('Session fetch failed:', error);\n      setInitialized(true); // Still set initialized to prevent infinite loading\n    });\n    const {\n      data: sub\n    } = supabase.auth.onAuthStateChange((event, sess) => {\n      var _sess$user;\n      if (canceled) return;\n      clearTimeout(timeoutId);\n      console.log('Auth state change:', event, sess === null || sess === void 0 ? void 0 : (_sess$user = sess.user) === null || _sess$user === void 0 ? void 0 : _sess$user.email);\n\n      // Handle token refresh failures\n      if (event === 'TOKEN_REFRESHED' && !sess) {\n        console.warn('Token refresh failed - clearing session');\n        setSession(null);\n        setUser(null);\n      } else {\n        var _sess$user2;\n        setSession(sess);\n        setUser((_sess$user2 = sess === null || sess === void 0 ? void 0 : sess.user) !== null && _sess$user2 !== void 0 ? _sess$user2 : null);\n      }\n      setInitialized(true);\n    });\n\n    // Add periodic session validation to detect stale sessions\n    const sessionCheckInterval = setInterval(async () => {\n      if (canceled) return;\n      try {\n        const {\n          data: {\n            session: currentSession\n          }\n        } = await supabase.auth.getSession();\n        if (currentSession && currentSession.expires_at) {\n          const expiresAt = new Date(currentSession.expires_at * 1000);\n          const now = new Date();\n          const timeUntilExpiry = expiresAt.getTime() - now.getTime();\n\n          // If session expires in less than 5 minutes, try to refresh\n          if (timeUntilExpiry < 5 * 60 * 1000 && timeUntilExpiry > 0) {\n            console.log('Session expiring soon, attempting refresh...');\n            const {\n              error\n            } = await supabase.auth.refreshSession();\n            if (error) {\n              console.warn('Session refresh failed:', error);\n              // Clear stale session\n              setSession(null);\n              setUser(null);\n            }\n          }\n        }\n      } catch (error) {\n        console.warn('Session validation failed:', error);\n      }\n    }, 60000); // Check every minute\n\n    return () => {\n      canceled = true;\n      clearTimeout(timeoutId);\n      clearInterval(sessionCheckInterval);\n      sub.subscription.unsubscribe();\n    };\n  }, []);\n  const signInWithEmail = useCallback(async (email, password) => {\n    const {\n      error\n    } = await supabase.auth.signInWithPassword({\n      email,\n      password\n    });\n    return {\n      error: error === null || error === void 0 ? void 0 : error.message\n    };\n  }, []);\n  const signUpWithEmail = useCallback(async (email, password, meta) => {\n    const {\n      data,\n      error\n    } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: meta\n      }\n    });\n    if (!error && data.user) {\n      // Ensure profile row exists\n      await supabase.from('profiles').upsert({\n        id: data.user.id,\n        email,\n        full_name: (meta === null || meta === void 0 ? void 0 : meta.full_name) || null\n      });\n    }\n    return {\n      error: error === null || error === void 0 ? void 0 : error.message\n    };\n  }, []);\n  const signOut = useCallback(async () => {\n    console.log('Starting signOut process...');\n\n    // First, eagerly clear local auth state to update UI immediately\n    setSession(null);\n    setUser(null);\n    try {\n      // Try to sign out from Supabase with timeout\n      const signOutPromise = supabase.auth.signOut();\n      const timeoutPromise = new Promise((_, reject) => setTimeout(() => reject(new Error('SignOut timeout')), 5000));\n      await Promise.race([signOutPromise, timeoutPromise]);\n      console.log('Supabase signOut successful');\n    } catch (error) {\n      console.warn('Supabase signOut failed or timed out:', error);\n      // Continue with local cleanup even if Supabase signOut fails\n    }\n    try {\n      if (typeof window !== 'undefined') {\n        console.log('Clearing local storage...');\n\n        // Clear Supabase cached tokens in localStorage/sessionStorage\n        for (const store of [window.localStorage, window.sessionStorage]) {\n          const keys = Object.keys(store);\n          for (const key of keys) {\n            if (key.startsWith('sb-')) {\n              store.removeItem(key);\n            }\n          }\n        }\n\n        // Clear any other auth-related keys\n        const authKeys = ['supabase.auth.token', 'supabase.auth.refresh_token', 'sb-auth-token'];\n        for (const key of authKeys) {\n          storeSafeRemove(key);\n        }\n\n        // Also clear our own app cache if any\n        storeSafeRemove('persist:root');\n        console.log('Local storage cleared successfully');\n      }\n    } catch (error) {\n      console.warn('Error clearing local storage:', error);\n    }\n    console.log('SignOut process completed');\n  }, []);\n  function storeSafeRemove(key) {\n    try {\n      window.localStorage.removeItem(key);\n    } catch (_) {}\n    try {\n      window.sessionStorage.removeItem(key);\n    } catch (_) {}\n  }\n  const value = {\n    session,\n    user,\n    initialized,\n    signInWithEmail,\n    signUpWithEmail,\n    signOut\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 10\n  }, this);\n}\n_s(AuthProvider, \"eX4zkKOgTeacRWmL+bpnNygMMkU=\");\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n  const ctx = useContext(AuthContext);\n  if (!ctx) throw new Error('useAuth must be used within AuthProvider');\n  return ctx;\n}\n_s2(useAuth, \"/dMy7t63NXD4eYACoT93CePwGrg=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","useCallback","supabase","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","session","setSession","user","setUser","initialized","setInitialized","canceled","timeoutId","setTimeout","console","log","auth","getSession","then","data","error","_data$session","_data$session$user","_data$session2","clearTimeout","catch","sub","onAuthStateChange","event","sess","_sess$user","email","warn","_sess$user2","sessionCheckInterval","setInterval","currentSession","expires_at","expiresAt","Date","now","timeUntilExpiry","getTime","refreshSession","clearInterval","subscription","unsubscribe","signInWithEmail","password","signInWithPassword","message","signUpWithEmail","meta","signUp","options","from","upsert","id","full_name","signOut","signOutPromise","timeoutPromise","Promise","_","reject","Error","race","window","store","localStorage","sessionStorage","keys","Object","key","startsWith","removeItem","authKeys","storeSafeRemove","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","ctx","$RefreshReg$"],"sources":["/workspace/src/lib/auth.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, useCallback } from 'react';\nimport { Session, User } from '@supabase/supabase-js';\nimport { supabase } from './supabaseClient';\n\ninterface AuthContextValue {\n  session: Session | null;\n  user: User | null;\n  initialized: boolean;\n  signInWithEmail: (email: string, password: string) => Promise<{ error?: string }>\n  signUpWithEmail: (email: string, password: string, meta?: { full_name?: string }) => Promise<{ error?: string }>\n  signOut: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextValue | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [session, setSession] = useState<Session | null>(null);\n  const [user, setUser] = useState<User | null>(null);\n  const [initialized, setInitialized] = useState(false);\n\n  useEffect(() => {\n    let canceled = false;\n    let timeoutId: NodeJS.Timeout;\n    \n    // Add timeout to prevent infinite loading on mobile\n    timeoutId = setTimeout(() => {\n      if (!canceled) {\n        console.log('Auth initialization timeout - setting initialized to true');\n        setInitialized(true);\n      }\n    }, 5000); // 5 second timeout\n    \n    supabase.auth.getSession().then(({ data, error }) => {\n      if (canceled) return;\n      clearTimeout(timeoutId);\n      \n      if (error) {\n        console.error('Session fetch error:', error);\n      }\n      \n      setSession(data.session ?? null);\n      setUser(data.session?.user ?? null);\n      setInitialized(true);\n    }).catch((error) => {\n      if (canceled) return;\n      clearTimeout(timeoutId);\n      console.error('Session fetch failed:', error);\n      setInitialized(true); // Still set initialized to prevent infinite loading\n    });\n\n    const { data: sub } = supabase.auth.onAuthStateChange((event, sess) => {\n      if (canceled) return;\n      clearTimeout(timeoutId);\n      console.log('Auth state change:', event, sess?.user?.email);\n      \n      // Handle token refresh failures\n      if (event === 'TOKEN_REFRESHED' && !sess) {\n        console.warn('Token refresh failed - clearing session');\n        setSession(null);\n        setUser(null);\n      } else {\n        setSession(sess);\n        setUser(sess?.user ?? null);\n      }\n      setInitialized(true);\n    });\n    \n    // Add periodic session validation to detect stale sessions\n    const sessionCheckInterval = setInterval(async () => {\n      if (canceled) return;\n      \n      try {\n        const { data: { session: currentSession } } = await supabase.auth.getSession();\n        if (currentSession && currentSession.expires_at) {\n          const expiresAt = new Date(currentSession.expires_at * 1000);\n          const now = new Date();\n          const timeUntilExpiry = expiresAt.getTime() - now.getTime();\n          \n          // If session expires in less than 5 minutes, try to refresh\n          if (timeUntilExpiry < 5 * 60 * 1000 && timeUntilExpiry > 0) {\n            console.log('Session expiring soon, attempting refresh...');\n            const { error } = await supabase.auth.refreshSession();\n            if (error) {\n              console.warn('Session refresh failed:', error);\n              // Clear stale session\n              setSession(null);\n              setUser(null);\n            }\n          }\n        }\n      } catch (error) {\n        console.warn('Session validation failed:', error);\n      }\n    }, 60000); // Check every minute\n    \n    return () => { \n      canceled = true; \n      clearTimeout(timeoutId);\n      clearInterval(sessionCheckInterval);\n      sub.subscription.unsubscribe(); \n    };\n  }, []);\n\n  const signInWithEmail = useCallback(async (email: string, password: string) => {\n    const { error } = await supabase.auth.signInWithPassword({ email, password });\n    return { error: error?.message };\n  }, []);\n\n  const signUpWithEmail = useCallback(async (email: string, password: string, meta?: { full_name?: string }) => {\n    const { data, error } = await supabase.auth.signUp({ email, password, options: { data: meta } });\n    if (!error && data.user) {\n      // Ensure profile row exists\n      await supabase.from('profiles').upsert({ id: data.user.id, email, full_name: meta?.full_name || null });\n    }\n    return { error: error?.message };\n  }, []);\n\n  const signOut = useCallback(async () => {\n    console.log('Starting signOut process...');\n    \n    // First, eagerly clear local auth state to update UI immediately\n    setSession(null);\n    setUser(null);\n    \n    try {\n      // Try to sign out from Supabase with timeout\n      const signOutPromise = supabase.auth.signOut();\n      const timeoutPromise = new Promise((_, reject) => \n        setTimeout(() => reject(new Error('SignOut timeout')), 5000)\n      );\n      \n      await Promise.race([signOutPromise, timeoutPromise]);\n      console.log('Supabase signOut successful');\n    } catch (error) {\n      console.warn('Supabase signOut failed or timed out:', error);\n      // Continue with local cleanup even if Supabase signOut fails\n    }\n    \n    try {\n      if (typeof window !== 'undefined') {\n        console.log('Clearing local storage...');\n        \n        // Clear Supabase cached tokens in localStorage/sessionStorage\n        for (const store of [window.localStorage, window.sessionStorage]) {\n          const keys = Object.keys(store);\n          for (const key of keys) {\n            if (key.startsWith('sb-')) {\n              store.removeItem(key);\n            }\n          }\n        }\n        \n        // Clear any other auth-related keys\n        const authKeys = ['supabase.auth.token', 'supabase.auth.refresh_token', 'sb-auth-token'];\n        for (const key of authKeys) {\n          storeSafeRemove(key);\n        }\n        \n        // Also clear our own app cache if any\n        storeSafeRemove('persist:root');\n        \n        console.log('Local storage cleared successfully');\n      }\n    } catch (error) {\n      console.warn('Error clearing local storage:', error);\n    }\n    \n    console.log('SignOut process completed');\n  }, []);\n\nfunction storeSafeRemove(key: string) {\n  try { window.localStorage.removeItem(key); } catch (_) {}\n  try { window.sessionStorage.removeItem(key); } catch (_) {}\n}\n\n  const value: AuthContextValue = { session, user, initialized, signInWithEmail, signUpWithEmail, signOut };\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n}\n\nexport function useAuth() {\n  const ctx = useContext(AuthContext);\n  if (!ctx) throw new Error('useAuth must be used within AuthProvider');\n  return ctx;\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}