{"ast":null,"code":"// API service for chatbot integration\n// This file contains placeholder functions for Gemini Pro API integration\n\n// Configuration for API\nexport const API_CONFIG = {\n  // Replace with your actual Gemini Pro API endpoint and key\n  GEMINI_API_URL: process.env.REACT_APP_GEMINI_API_URL || 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent',\n  GEMINI_API_KEY: process.env.REACT_APP_GEMINI_API_KEY || 'your-api-key-here'\n};\n\n// Function for sending message to Gemini Pro\nexport const sendMessageToGemini = async message => {\n  try {\n    var _data$candidates, _data$candidates$, _data$candidates$$con, _data$candidates$$con2, _data$candidates$$con3;\n    // Check if API key is configured\n    if (!API_CONFIG.GEMINI_API_KEY || API_CONFIG.GEMINI_API_KEY === 'your-api-key-here' || API_CONFIG.GEMINI_API_KEY.length < 10) {\n      return {\n        message: 'Please configure your Gemini Pro API key in the .env file. For now, this is a placeholder response.',\n        success: true\n      };\n    }\n    console.log('Using API key:', API_CONFIG.GEMINI_API_KEY.substring(0, 10) + '...');\n\n    // Make actual API call to Gemini Pro\n    const response = await fetch(`${API_CONFIG.GEMINI_API_URL}?key=${API_CONFIG.GEMINI_API_KEY}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        contents: [{\n          parts: [{\n            text: message\n          }]\n        }]\n      })\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      var _data$error;\n      console.error('API Error:', data);\n      throw new Error(((_data$error = data.error) === null || _data$error === void 0 ? void 0 : _data$error.message) || 'Failed to get response from Gemini Pro');\n    }\n\n    // Extract the response text from Gemini Pro\n    const responseText = (_data$candidates = data.candidates) === null || _data$candidates === void 0 ? void 0 : (_data$candidates$ = _data$candidates[0]) === null || _data$candidates$ === void 0 ? void 0 : (_data$candidates$$con = _data$candidates$.content) === null || _data$candidates$$con === void 0 ? void 0 : (_data$candidates$$con2 = _data$candidates$$con.parts) === null || _data$candidates$$con2 === void 0 ? void 0 : (_data$candidates$$con3 = _data$candidates$$con2[0]) === null || _data$candidates$$con3 === void 0 ? void 0 : _data$candidates$$con3.text;\n    if (!responseText) {\n      console.error('No response text in data:', data);\n      throw new Error('No response text received from Gemini Pro');\n    }\n    return {\n      message: responseText,\n      success: true\n    };\n  } catch (error) {\n    console.error('Error calling Gemini Pro API:', error);\n    return {\n      message: 'Sorry, I encountered an error. Please try again later.',\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    };\n  }\n};\n\n// Function to format conversation history for context\nexport const formatConversationHistory = messages => {\n  return messages.map(msg => `${msg.sender === 'user' ? 'User' : 'Assistant'}: ${msg.text}`).join('\\n');\n};\n\n// Function to validate API configuration\nexport const validateApiConfig = () => {\n  return !!(API_CONFIG.GEMINI_API_KEY && API_CONFIG.GEMINI_API_KEY !== 'your-api-key-here');\n};\n\n// Export default API service\nexport default {\n  sendMessageToGemini,\n  formatConversationHistory,\n  validateApiConfig,\n  API_CONFIG\n};","map":{"version":3,"names":["API_CONFIG","GEMINI_API_URL","process","env","REACT_APP_GEMINI_API_URL","GEMINI_API_KEY","REACT_APP_GEMINI_API_KEY","sendMessageToGemini","message","_data$candidates","_data$candidates$","_data$candidates$$con","_data$candidates$$con2","_data$candidates$$con3","length","success","console","log","substring","response","fetch","method","headers","body","JSON","stringify","contents","parts","text","data","json","ok","_data$error","error","Error","responseText","candidates","content","formatConversationHistory","messages","map","msg","sender","join","validateApiConfig"],"sources":["/home/prateek/chatbot-app/src/services/api.ts"],"sourcesContent":["// API service for chatbot integration\n// This file contains placeholder functions for Gemini Pro API integration\n\nexport interface ChatMessage {\n  id: string;\n  text: string;\n  sender: 'user' | 'bot';\n  timestamp: Date;\n}\n\nexport interface ChatResponse {\n  message: string;\n  success: boolean;\n  error?: string;\n}\n\n// Configuration for API\nexport const API_CONFIG = {\n  // Replace with your actual Gemini Pro API endpoint and key\n  GEMINI_API_URL: process.env.REACT_APP_GEMINI_API_URL || 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent',\n  GEMINI_API_KEY: process.env.REACT_APP_GEMINI_API_KEY || 'your-api-key-here',\n};\n\n// Function for sending message to Gemini Pro\nexport const sendMessageToGemini = async (message: string): Promise<ChatResponse> => {\n  try {\n    // Check if API key is configured\n    if (!API_CONFIG.GEMINI_API_KEY || API_CONFIG.GEMINI_API_KEY === 'your-api-key-here' || API_CONFIG.GEMINI_API_KEY.length < 10) {\n      return {\n        message: 'Please configure your Gemini Pro API key in the .env file. For now, this is a placeholder response.',\n        success: true\n      };\n    }\n\n    console.log('Using API key:', API_CONFIG.GEMINI_API_KEY.substring(0, 10) + '...');\n\n    // Make actual API call to Gemini Pro\n    const response = await fetch(`${API_CONFIG.GEMINI_API_URL}?key=${API_CONFIG.GEMINI_API_KEY}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        contents: [{\n          parts: [{\n            text: message\n          }]\n        }]\n      })\n    });\n\n    const data = await response.json();\n    \n    if (!response.ok) {\n      console.error('API Error:', data);\n      throw new Error(data.error?.message || 'Failed to get response from Gemini Pro');\n    }\n\n    // Extract the response text from Gemini Pro\n    const responseText = data.candidates?.[0]?.content?.parts?.[0]?.text;\n    \n    if (!responseText) {\n      console.error('No response text in data:', data);\n      throw new Error('No response text received from Gemini Pro');\n    }\n\n    return {\n      message: responseText,\n      success: true\n    };\n    \n  } catch (error) {\n    console.error('Error calling Gemini Pro API:', error);\n    return {\n      message: 'Sorry, I encountered an error. Please try again later.',\n      success: false,\n      error: error instanceof Error ? error.message : 'Unknown error'\n    };\n  }\n};\n\n// Function to format conversation history for context\nexport const formatConversationHistory = (messages: ChatMessage[]): string => {\n  return messages\n    .map(msg => `${msg.sender === 'user' ? 'User' : 'Assistant'}: ${msg.text}`)\n    .join('\\n');\n};\n\n// Function to validate API configuration\nexport const validateApiConfig = (): boolean => {\n  return !!(API_CONFIG.GEMINI_API_KEY && API_CONFIG.GEMINI_API_KEY !== 'your-api-key-here');\n};\n\n// Export default API service\nexport default {\n  sendMessageToGemini,\n  formatConversationHistory,\n  validateApiConfig,\n  API_CONFIG\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}