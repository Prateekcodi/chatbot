{"ast":null,"code":"// API service for frontend to communicate with backend\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'https://your-service-name.onrender.com';\nexport const sendMessageToGemini = async message => {\n  try {\n    var _data$responses, _data$responses$;\n    const response = await fetch(`${BACKEND_URL}/api/ask`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        prompt: message\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    return {\n      success: true,\n      message: ((_data$responses = data.responses) === null || _data$responses === void 0 ? void 0 : (_data$responses$ = _data$responses[0]) === null || _data$responses$ === void 0 ? void 0 : _data$responses$.text) || 'No response from AI',\n      data: data\n    };\n  } catch (error) {\n    console.error('Error calling backend:', error);\n    return {\n      success: false,\n      message: 'Failed to get response from AI. Please try again.',\n      error: error\n    };\n  }\n};\n\n// Function to format conversation history for context\nexport const formatConversationHistory = messages => {\n  return messages.map(msg => `${msg.sender === 'user' ? 'User' : 'Assistant'}: ${msg.text}`).join('\\n');\n};\n\n// Function to validate API configuration\nexport const validateApiConfig = () => {\n  return !!(API_CONFIG.GEMINI_API_KEY && API_CONFIG.GEMINI_API_KEY !== 'your-api-key-here');\n};\n\n// Export default API service\nexport default {\n  sendMessageToGemini,\n  formatConversationHistory,\n  validateApiConfig,\n  API_CONFIG\n};","map":{"version":3,"names":["BACKEND_URL","process","env","REACT_APP_BACKEND_URL","sendMessageToGemini","message","_data$responses","_data$responses$","response","fetch","method","headers","body","JSON","stringify","prompt","ok","Error","status","data","json","success","responses","text","error","console","formatConversationHistory","messages","map","msg","sender","join","validateApiConfig","API_CONFIG","GEMINI_API_KEY"],"sources":["/home/prateek/chatbot-app/src/services/api.ts"],"sourcesContent":["// API service for frontend to communicate with backend\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'https://your-service-name.onrender.com';\n\nexport interface ApiResponse {\n  success: boolean;\n  message: string;\n  data?: any;\n}\n\nexport const sendMessageToGemini = async (message: string): Promise<ApiResponse> => {\n  try {\n    const response = await fetch(`${BACKEND_URL}/api/ask`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ prompt: message }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return {\n      success: true,\n      message: data.responses?.[0]?.text || 'No response from AI',\n      data: data\n    };\n  } catch (error) {\n    console.error('Error calling backend:', error);\n    return {\n      success: false,\n      message: 'Failed to get response from AI. Please try again.',\n      error: error\n    };\n  }\n};\n\n// Function to format conversation history for context\nexport const formatConversationHistory = (messages: ChatMessage[]): string => {\n  return messages\n    .map(msg => `${msg.sender === 'user' ? 'User' : 'Assistant'}: ${msg.text}`)\n    .join('\\n');\n};\n\n// Function to validate API configuration\nexport const validateApiConfig = (): boolean => {\n  return !!(API_CONFIG.GEMINI_API_KEY && API_CONFIG.GEMINI_API_KEY !== 'your-api-key-here');\n};\n\n// Export default API service\nexport default {\n  sendMessageToGemini,\n  formatConversationHistory,\n  validateApiConfig,\n  API_CONFIG\n};\n"],"mappings":"AAAA;AACA,MAAMA,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB,IAAI,wCAAwC;AAQjG,OAAO,MAAMC,mBAAmB,GAAG,MAAOC,OAAe,IAA2B;EAClF,IAAI;IAAA,IAAAC,eAAA,EAAAC,gBAAA;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGT,WAAW,UAAU,EAAE;MACrDU,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,MAAM,EAAEV;MAAQ,CAAC;IAC1C,CAAC,CAAC;IAEF,IAAI,CAACG,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBT,QAAQ,CAACU,MAAM,EAAE,CAAC;IAC3D;IAEA,MAAMC,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;IAClC,OAAO;MACLC,OAAO,EAAE,IAAI;MACbhB,OAAO,EAAE,EAAAC,eAAA,GAAAa,IAAI,CAACG,SAAS,cAAAhB,eAAA,wBAAAC,gBAAA,GAAdD,eAAA,CAAiB,CAAC,CAAC,cAAAC,gBAAA,uBAAnBA,gBAAA,CAAqBgB,IAAI,KAAI,qBAAqB;MAC3DJ,IAAI,EAAEA;IACR,CAAC;EACH,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO;MACLH,OAAO,EAAE,KAAK;MACdhB,OAAO,EAAE,mDAAmD;MAC5DmB,KAAK,EAAEA;IACT,CAAC;EACH;AACF,CAAC;;AAED;AACA,OAAO,MAAME,yBAAyB,GAAIC,QAAuB,IAAa;EAC5E,OAAOA,QAAQ,CACZC,GAAG,CAACC,GAAG,IAAI,GAAGA,GAAG,CAACC,MAAM,KAAK,MAAM,GAAG,MAAM,GAAG,WAAW,KAAKD,GAAG,CAACN,IAAI,EAAE,CAAC,CAC1EQ,IAAI,CAAC,IAAI,CAAC;AACf,CAAC;;AAED;AACA,OAAO,MAAMC,iBAAiB,GAAGA,CAAA,KAAe;EAC9C,OAAO,CAAC,EAAEC,UAAU,CAACC,cAAc,IAAID,UAAU,CAACC,cAAc,KAAK,mBAAmB,CAAC;AAC3F,CAAC;;AAED;AACA,eAAe;EACb9B,mBAAmB;EACnBsB,yBAAyB;EACzBM,iBAAiB;EACjBC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}