{"ast":null,"code":"// API service for frontend to communicate with backend\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'https://chatbot-1-u7m0.onrender.com';\nexport const sendMessageToGemini = async message => {\n  try {\n    const response = await fetch(`${BACKEND_URL}/api/ask`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        prompt: message\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n\n    // Check if we have successful responses from any AI service\n    if (data.responses) {\n      // Find the first successful response (preferably Gemini)\n      const geminiResponse = data.responses.gemini;\n      const cohereResponse = data.responses.cohere;\n      const openrouterResponse = data.responses.openrouter;\n\n      // Prioritize Gemini, then Cohere, then OpenRouter\n      let aiResponse = null;\n      if (geminiResponse && geminiResponse.success) {\n        aiResponse = geminiResponse;\n      } else if (cohereResponse && cohereResponse.success) {\n        aiResponse = cohereResponse;\n      } else if (openrouterResponse && openrouterResponse.success) {\n        aiResponse = openrouterResponse;\n      }\n      if (aiResponse && aiResponse.response) {\n        return {\n          success: true,\n          message: aiResponse.response,\n          data: data\n        };\n      }\n    }\n\n    // If no successful response found\n    return {\n      success: false,\n      message: 'No response from AI',\n      data: data\n    };\n  } catch (error) {\n    console.error('Error calling backend:', error);\n    return {\n      success: false,\n      message: 'Failed to get response from AI. Please try again.',\n      error: error\n    };\n  }\n};\n\n// Dedicated Chatbot function using the simpler endpoint\nexport const sendChatbotMessage = async message => {\n  try {\n    const response = await fetch(`${BACKEND_URL}/api/chatbot`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        prompt: message\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const data = await response.json();\n    if (data.success && data.message) {\n      return {\n        success: true,\n        message: data.message,\n        data: data\n      };\n    } else {\n      return {\n        success: false,\n        message: data.message || 'No response from AI',\n        data: data\n      };\n    }\n  } catch (error) {\n    console.error('Error calling chatbot backend:', error);\n    return {\n      success: false,\n      message: 'Failed to get response from AI. Please try again.',\n      error: error\n    };\n  }\n};","map":{"version":3,"names":["BACKEND_URL","process","env","REACT_APP_BACKEND_URL","sendMessageToGemini","message","response","fetch","method","headers","body","JSON","stringify","prompt","ok","Error","status","data","json","responses","geminiResponse","gemini","cohereResponse","cohere","openrouterResponse","openrouter","aiResponse","success","error","console","sendChatbotMessage"],"sources":["/home/prateek/chatbot-app/src/services/api.ts"],"sourcesContent":["// API service for frontend to communicate with backend\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'https://chatbot-1-u7m0.onrender.com';\n\nexport interface ApiResponse {\n  success: boolean;\n  message: string;\n  data?: any;\n  error?: unknown;\n}\n\nexport const sendMessageToGemini = async (message: string): Promise<ApiResponse> => {\n  try {\n    const response = await fetch(`${BACKEND_URL}/api/ask`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ prompt: message }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    \n    // Check if we have successful responses from any AI service\n    if (data.responses) {\n      // Find the first successful response (preferably Gemini)\n      const geminiResponse = data.responses.gemini;\n      const cohereResponse = data.responses.cohere;\n      const openrouterResponse = data.responses.openrouter;\n      \n      // Prioritize Gemini, then Cohere, then OpenRouter\n      let aiResponse = null;\n      if (geminiResponse && geminiResponse.success) {\n        aiResponse = geminiResponse;\n      } else if (cohereResponse && cohereResponse.success) {\n        aiResponse = cohereResponse;\n      } else if (openrouterResponse && openrouterResponse.success) {\n        aiResponse = openrouterResponse;\n      }\n      \n      if (aiResponse && aiResponse.response) {\n        return {\n          success: true,\n          message: aiResponse.response,\n          data: data\n        };\n      }\n    }\n    \n    // If no successful response found\n    return {\n      success: false,\n      message: 'No response from AI',\n      data: data\n    };\n  } catch (error) {\n    console.error('Error calling backend:', error);\n    return {\n      success: false,\n      message: 'Failed to get response from AI. Please try again.',\n      error: error\n    };\n  }\n};\n\n// Dedicated Chatbot function using the simpler endpoint\nexport const sendChatbotMessage = async (message: string): Promise<ApiResponse> => {\n  try {\n    const response = await fetch(`${BACKEND_URL}/api/chatbot`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ prompt: message }),\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n    \n    if (data.success && data.message) {\n      return {\n        success: true,\n        message: data.message,\n        data: data\n      };\n    } else {\n      return {\n        success: false,\n        message: data.message || 'No response from AI',\n        data: data\n      };\n    }\n  } catch (error) {\n    console.error('Error calling chatbot backend:', error);\n    return {\n      success: false,\n      message: 'Failed to get response from AI. Please try again.',\n      error: error\n    };\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}